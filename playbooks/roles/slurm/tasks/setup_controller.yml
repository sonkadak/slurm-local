---
- name: Install necessary packages for Slurm controller
  package:
    name:
      - mariadb-server
      - python3-PyMySQL
      - mailx
      - policycoreutils-python-utils
    state: present
  when: ansible_os_family == "RedHat"

- name: Install necessary packages for Slurm controller on Debian
  apt:
    name:
      - mariadb-server
      - python3-pymysql
      - mailutils
      - policykit-1
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Start MariaDB service
  systemd:
    name: mariadb
    state: started
    enabled: yes

- name: Create Slurm database user and grant privileges
  mysql_user:
    name: "{{ slurm_db_user }}"
    password: "{{ slurm_db_pw }}"
    priv: '{{ slurm_db_name }}.*:ALL'
    login_user: root
    host: localhost
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present

- name: Flush privileges
  mysql_db:
    name: slurm_acct_db
    state: present
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create necessary directories for Slurm
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ slurm_user }}"
    group: "{{ slurm_user_group }}"
  loop:
    - "{{ slurm_config_dir }}"
    - /var/spool/slurm/ctld
    - /var/log/slurm

- name: Apply slurm.conf template
  template:
    src: slurm.conf.j2
    dest: /etc/slurm/slurm.conf
    owner: root
    group: root
    mode: '0644'

- name: Apply slurmdbd.conf template
  template:
    src: slurmdbd.conf.j2
    dest: /etc/slurm/slurmdbd.conf
    owner: root
    group: root
    mode: '0600'

- name: Copy Slurm service files
  copy:
    src: "{{ slurm_build_dir }}/etc/{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    remote_src: yes
  with_items:
    - slurmctld.service
    - slurmdbd.service

- name: Start Slurm services
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - slurmdbd.service
    - slurmctld.service

- name: Check if Slurm cluster exists
  command: sacctmgr list cluster where name={{ slurm_cluster_name }} format=Name
  register: cluster_check
  changed_when: false
  failed_when: false

- name: Create cluster if it does not exist
  command: sacctmgr -i add cluster {{ slurm_cluster_name }}
  when: "'{{ slurm_cluster_name }}' not in cluster_check.stdout"

- name: Check if Slurm account exists
  command: sacctmgr list account where name=compute-account format=Name
  register: account_check
  changed_when: false
  failed_when: false

- name: Create account if it does not exist
  command: sacctmgr -i add account compute-account Description="Compute Accounts" Organization="Prestige"
  when: "'compute-account' not in account_check.stdout"

- name: Check if Slurm user exists
  command: sacctmgr list user where name={{ slurm_account_user }} format=Name -nP
  register: user_check
  changed_when: false
  failed_when: false

- name: Create user if it does not exist
  command: sacctmgr -i create user {{ slurm_account_user }} account=compute-account adminlevel=None
  when: slurm_account_user not in user_check.stdout_lines